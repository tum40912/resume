!gdown 1Ae_OebyChDVh_x8YOfGJzpQtUIYOWpaO
!unzip ThaiFruit.zip
dataset_path="ThaiFruit"
IMAGE_SIZE = 128
BATCH_SIZE = 64
# Imports
import os, warnings
import matplotlib.pyplot as plt
from matplotlib import gridspec

import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory

# Reproducability
def set_seed(seed=31415):
    np.random.seed(seed)
    tf.random.set_seed(seed)
    os.environ['PYTHONHASHSEED'] = str(seed)
    os.environ['TF_DETERMINISTIC_OPS'] = '1'
set_seed(31415)

# Set Matplotlib defaults
plt.rc('figure', autolayout=True)
plt.rc('axes', labelweight='bold', labelsize='large',
       titleweight='bold', titlesize=18, titlepad=10)
plt.rc('image', cmap='magma')
warnings.filterwarnings("ignore") # to clean up output cells


# Load training and validation sets
image_size = [128, 128]

ds_train_ = image_dataset_from_directory(
    dataset_path + '/train',
    labels='inferred',
    label_mode='categorical',
    image_size=image_size,
    interpolation='nearest',
    batch_size=64,
    shuffle=True,
)
ds_valid_ = image_dataset_from_directory(
    dataset_path + '/val',
    labels='inferred',
    label_mode='categorical',
    image_size=[128, 128],
    interpolation='nearest',
    batch_size=64,
    shuffle=True,
)
ds_test_ = image_dataset_from_directory(
    dataset_path + '/test',
    labels='inferred',
    label_mode='categorical',
    image_size=[128, 128],
    interpolation='nearest',
    batch_size=64,
    shuffle=True,
)
****************************************************************************************************************************
def imageToArray(imageName):

    image_path = imageName
    width, height = 128, 128

    image = Image.open(image_path)
    image = image.resize((width, height))


    image_array = np.asarray(image)


    if len(image_array.shape) == 2:
        image_array = np.stack((image_array,) * 3, axis=-1)

    image_array = image_array / 255.0

    image_array = image_array.reshape(1, width, height, 3)
    return image_array
  ***************************************************************************************************************************
from PIL import Image

def resize_image(image_path, target_size):
    image = Image.open(image_path)
    image = image.resize(target_size)
    return image
*********************************************************************************************************************************
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

model = keras.Sequential([
    # CNN
    layers.Conv2D(64,3, padding='same', activation = 'relu', input_shape=(128, 128, 3)),
    layers.MaxPooling2D(),
    layers.Conv2D(128,3, padding='same', activation = 'relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(256,3, padding='same', activation = 'relu'),
    layers.MaxPooling2D(),


    # Classification
    layers.Flatten(),
    layers.Dense(128, activation="relu"),
    layers.Dense(2, activation='softmax'),
])
*************************************************************************************************************************************
model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy'],
)

history = model.fit(
    ds_train_,
    validation_data=ds_valid_,
    epochs=80,
    verbose=1,
)
****************************************************************************************************************************************
import numpy as np
from PIL import Image

def imageToArray(imageName):

  image_path =imageName
  width, height = 128, 128

  image = Image.open(image_path)
  image = image.resize((width, height))

  image_array = np.asarray(image)
  image_array = image_array / 255.0

  image_array = image_array.reshape(1, width, height, 3)

  return image_array
*******************************************************************************************************************************************
import random

class_names = ['Champada', 'jackfruit']

randomlist = []
for i in range(0, 10):
    n = random.randrange(0, len(ds_test_.file_paths), 1)
    randomlist.append(n)

for i in randomlist:
    image_path = ds_test_.file_paths[i]
    image = tf.io.read_file(image_path)
    image = tf.io.decode_jpeg(image)
    image_array = tf.image.resize(image, (128, 128))
    image_array = tf.expand_dims(image_array, 0)
    preds = model.predict(image_array)
    print("Image: " + image_path)


    f, axarr = plt.subplots(1, 2, figsize=(8, 3), gridspec_kw={'width_ratios': [2, 1.5]})

    image = tf.io.read_file(image_path)
    image = tf.io.decode_jpeg(image)
    axarr[0].imshow(tf.squeeze(image), cmap='gray')
    axarr[0].axis('off')

    axarr[1].bar(class_names, preds[0])
    plt.xticks(rotation=45, fontsize=12)
    plt.yticks(fontsize=12)
    axarr[1].set_xlabel('Class', fontsize=12)
    axarr[1].set_ylabel('Probability', fontsize=12)
    axarr[1].set_title('Predicted Probability', fontsize=12)

    plt.show()
